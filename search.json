[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MultiDrugODE",
    "section": "",
    "text": "Modelling drug delivery\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/DrugDeliveryExtra.html",
    "href": "posts/DrugDeliveryExtra.html",
    "title": "Modelling drug delivery",
    "section": "",
    "text": "Assumptions:\n\nDrug has a specified half life\nThe drug is orally ingested three times per day at specified concentrations\nThe release into the blood stream has an associated timescale (‘Source time scale’) such that the time of peak blood concentration lags the ingestion time.\n\n\n\nLet \\(t\\) represent time and \\(C(t)\\) represent the drug concentration in the blood stream.\nSuppose that the drug has a half-life of 6 hours and that at some set of times, \\(\\{t_i\\}\\), a concentration of drug \\(c_i\\) is delivered to a patient.\nConsider the model \\[\n\\frac{dC}{dt}=-kC+\\sum_i c_i f(t,t_i), \\quad N(0)=0.\n\\]\nThe first term describes the linear degradation of the drug. The second term represent the delivery of drug at a prescribed set of times.\nIn Figure 1 you can explore the effect of different treatment protocols.\nThe AUC refers to the area under the curve. This is a metric used to calculate the total dosage delivered to the patient. It is just the integral\n\\[\nAUC=\\int_0^T C(t)dt.\n\\]\n\\(C_{max}\\) refers to the maximum concentration experienced by the patient.\nIn the merged tab, a weighted sum of drug profiles is plotted.\nTo calibrate:\n\nSet the half-life to known value.\nSet all but one concentrations to zero.\nIdentify the value of ‘Source Time Sc.’ so that the time from ingestion to peak is consistent with expected kinetics.\n\n\n\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\nfrom scipy.integrate import simpson\n\napp_ui = ui.page_fluid(\n    ui.navset_tab(\n    ui.nav_panel(\"Drug 1\",\n\n    ui.layout_sidebar(\n        ui.sidebar(\n    ui.input_slider(id=\"drug_half_life_1\",label=\"Drug half life (h)\",min=1,max=12,value=6,step=1),\n    ui.input_slider(id=\"t1\",label=\"First time (h)\",min=0.0,max=10.0,value=7.0,step=1.0),\n    ui.input_slider(id=\"t2\",label=\"Second time (h)\",min=10.0,max=18.0,value=12.0,step=1.0),\n    ui.input_slider(id=\"t3\",label=\"Third time (h)\",min=17.0,max=22.0,value=24.0,step=1.0),\n    ui.input_slider(id=\"c1\",label=\"First conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"c2\",label=\"Second conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"c3\",label=\"Third conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"source_time_scale_1\",label=\"Source Time Sc (h)\",min=0.0,max=12.0,value=4.0,step=0.1),      \n            ),\n\n        ui.output_plot(\"plot\"),\n    ),\n    ),\n\n    ui.nav_panel(\"Drug 2\",\n\n    ui.layout_sidebar(\n        ui.sidebar(\n    ui.input_slider(id=\"drug_half_life_2\",label=\"Drug half life (h)\",min=1,max=12,value=6,step=1),\n    ui.input_slider(id=\"t1_2\",label=\"First time (h)\",min=0.0,max=10.0,value=7.0,step=1.0),\n    ui.input_slider(id=\"t2_2\",label=\"Second time (h)\",min=10.0,max=18.0,value=12.0,step=1.0),\n    ui.input_slider(id=\"t3_2\",label=\"Third time (h)\",min=17.0,max=22.0,value=24.0,step=1.0),\n    ui.input_slider(id=\"c1_2\",label=\"First conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"c2_2\",label=\"Second conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"c3_2\",label=\"Third conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"source_time_scale_2\",label=\"Source Time Sc. (h)\",min=0.0,max=12.0,value=4.0,step=0.1),      \n            ),\n\n        ui.output_plot(\"plot_drug2\"),\n    ),\n    ),\n\n    ui.nav_panel(\"Merge\",\n\n    ui.layout_sidebar(\n        ui.sidebar(\n    ui.input_slider(id=\"weight_drug_1\",label=\"Weight_1\",min=0,max=12,value=1.0,step=0.05),\n     ui.input_slider(id=\"weight_drug_2\",label=\"Weight_2\",min=0.0,max=50.0,value=18.0,step=1),\n          \n            ),\n\n        ui.output_plot(\"plot_drug3\"),\n    ),\n    ),\n\n\n\n    \n    ),\n)\n\n\ndef server(input, output, session):\n\n    def rhs_pop_model(x,t,k_source_rate,drug_decay_rate,t_0,drug_conc_source):\n          rhs=np.zeros_like(x,dtype=float)\n          source_term=0.0\n          for i in range(len(t_0)):\n            source_term+=drug_conc_source[i]*np.exp(-k_source_rate*(t-t_0[i]))*k_source_rate\n          N=x[0]\n          rhs[0]=source_term-drug_decay_rate*N\n          return rhs\n\n    def ComputeModelSolution(k_source_rate,drug_decay_rate,t_sort_day,drug_conc_day):\n        # Define rhs of LV ODEs\n    \n        drug_conc=[]\n        t_sort=[]\n        Cmax=0.0\n        for i in range(num_days):\n            drug_conc_day_i=[x for x in drug_conc_day]\n            t_sort_day_i = [x + i*24.0 for x in t_sort_day]\n            t_sort=t_sort+t_sort_day_i\n            drug_conc=drug_conc+drug_conc_day_i\n        \n        t_sort.append(T_final)        \n        N_0=0.0\n        AUC=0.0\n        t_sol_1=[]\n        N_sol_1=[]\n        for i in range(0,len(t_sort)-1):\n        # Define discretised t domain\n            t = np.linspace(t_sort[i], t_sort[i+1], 1000)\n\n            # define initial conditions\n            init_cond=[N_0]\n            #assert(np.min(t)&gt;np.max(t_sort[0:i]))\n            # Compute numerical solution of ODEs\n            sol1 = odeint(rhs_pop_model,init_cond,t,args=(k_source_rate,drug_decay_rate,t_sort[0:i+1],drug_conc[0:i+1]))\n\n            # Plot results\n            N=sol1[:,0]\n            N_0=N[-1]\n            N_0=N_0\n            t_sol_1=t_sol_1+list(t)\n            N_sol_1=N_sol_1+list(N)\n            #ax.plot(t, N,'b')\n            AUC=AUC+simpson(N, x=t)\n            Cmax=np.max([Cmax,np.max(N)])\n        return t_sol_1,N_sol_1,AUC,Cmax\n\n    T_final=96\n    num_days=int(T_final/24)\n    \n    @reactive.calc\n    def Drug1Compute():\n        drug_half_life_1=float(input.drug_half_life_1())\n        t1=float(input.t1())\n        t2=float(input.t2())\n        t3=float(input.t3())\n        c1=float(input.c1())\n        c2=float(input.c2())\n        c3=float(input.c3())\n        source_time_scale_1=float(input.source_time_scale_1())\n\n        drug_decay_rate_1=np.log(2)/drug_half_life_1\n        k_source_rate= np.log(2)/source_time_scale_1   \n\n        drug_conc_day=[c1,c2,c3]\n        t_sort_day=[t1,t2,t3] \n\n        t_1,N_1,AUC,Cmax=ComputeModelSolution(k_source_rate,drug_decay_rate_1,t_sort_day,drug_conc_day)\n        return t_1,N_1,AUC,Cmax\n\n    @reactive.calc\n    def Drug2Compute():\n        drug_half_life_2=float(input.drug_half_life_2())\n        t1_2=float(input.t1_2())\n        t2_2=float(input.t2_2())\n        t3_2=float(input.t3_2())\n        c1_2=float(input.c1_2())\n        c2_2=float(input.c2_2())\n        c3_2=float(input.c3_2())\n        source_time_scale_2=float(input.source_time_scale_2())\n\n        drug_decay_rate_2=np.log(2)/drug_half_life_2\n        k_source_rate_2= np.log(2)/source_time_scale_2   \n\n        drug_conc_day_2=[c1_2,c2_2,c3_2]\n        t_sort_day_2=[t1_2,t2_2,t3_2] \n\n        t_2,N_2,AUC_2,Cmax_2=ComputeModelSolution(k_source_rate_2,drug_decay_rate_2,t_sort_day_2,drug_conc_day_2)\n        return t_2,N_2,AUC_2,Cmax_2\n\n    @render.plot\n    def plot():\n        fig, ax = plt.subplots(figsize=(6,6))\n        \n        t_1,N_1,AUC,Cmax=Drug1Compute()  \n        \n        ax.plot(t_1,N_1)\n        ax.plot([24,24],[0,Cmax],'r--')\n        ax.plot([48,48],[0,Cmax],'r--')\n        ax.plot([72,72],[0,Cmax],'r--')\n\n        ax.set_xlabel('$t$ (h)')\n        ax.set_xticks([0,12,24,36,48,60,72])\n\n        ax.set_title('AUC = ' + str(int(AUC)) +', Cmax = ' + str(int(Cmax)))\n        \n        plt.grid()\n\n    \n\n    @render.plot\n    def plot_drug2():\n        fig_2, ax_2 = plt.subplots(figsize=(6,6))\n        \n        t_2,N_2,AUC_2,Cmax2=Drug2Compute()  \n\n\n        ax_2.plot(t_2, N_2,'b')\n\n        ax_2.plot([24,24],[0,Cmax2],'r--')\n        ax_2.plot([48,48],[0,Cmax2],'r--')\n        ax_2.plot([72,72],[0,Cmax2],'r--')\n\n        ax_2.set_xlabel('$t$ (h)')\n        ax_2.set_xticks([0,12,24,36,48,60,72])\n\n        ax_2.set_title('AUC = ' + str(int(AUC_2)) +', Cmax = ' + str(int(Cmax2)))\n        \n        plt.grid()\n\n    @render.plot\n    def plot_drug3():\n        fig_3, ax_3 = plt.subplots(3,1)\n        \n        t_1,N_1,AUC_1,Cmax1=Drug1Compute() \n        t_2,N_2,AUC_2,Cmax2=Drug2Compute() \n\n        weight_1=float(input.weight_drug_1())\n        weight_2=float(input.weight_drug_2())\n\n\n        ax_3[0].plot(t_1,N_1)  \n        ax_3[0].plot([24,24],[0,Cmax2],'r--')\n        ax_3[0].plot([48,48],[0,Cmax2],'r--')\n        ax_3[0].plot([72,72],[0,Cmax2],'r--')\n        ax_3[0].set_xlabel('$t$ (h)')\n        ax_3[0].set_xticks([0,12,24,36,48,60,72])\n        ax_3[0].set_title('Drug 1')\n\n\n        ax_3[1].plot(t_2,N_2)  \n        ax_3[1].plot([24,24],[0,Cmax2],'r--')\n        ax_3[1].plot([48,48],[0,Cmax2],'r--')\n        ax_3[1].plot([72,72],[0,Cmax2],'r--')\n        ax_3[1].set_xlabel('$t$ (h)')\n        ax_3[1].set_xticks([0,12,24,36,48,60,72])\n        ax_3[1].set_title('Drug 2')\n\n\n        ax_3[2].plot(t_1,weight_1*np.array(N_1)+weight_2*np.array(N_2))\n  \n        ax_3[2].plot([24,24],[0,Cmax2],'r--')\n        ax_3[2].plot([48,48],[0,Cmax2],'r--')\n        ax_3[2].plot([72,72],[0,Cmax2],'r--')\n\n        ax_3[2].set_xlabel('$t$ (h)')\n        ax_3[2].set_xticks([0,12,24,36,48,60,72])\n        ax_3[2].set_title('Weighted sum')\n\n     \n        plt.grid()\n\n\n    plt.show()\n\n    \napp = App(app_ui, server)\n\n\nFigure 1"
  },
  {
    "objectID": "posts/DrugDeliveryExtra.html#model-development",
    "href": "posts/DrugDeliveryExtra.html#model-development",
    "title": "Modelling drug delivery",
    "section": "",
    "text": "Let \\(t\\) represent time and \\(C(t)\\) represent the drug concentration in the blood stream.\nSuppose that the drug has a half-life of 6 hours and that at some set of times, \\(\\{t_i\\}\\), a concentration of drug \\(c_i\\) is delivered to a patient.\nConsider the model \\[\n\\frac{dC}{dt}=-kC+\\sum_i c_i f(t,t_i), \\quad N(0)=0.\n\\]\nThe first term describes the linear degradation of the drug. The second term represent the delivery of drug at a prescribed set of times.\nIn Figure 1 you can explore the effect of different treatment protocols.\nThe AUC refers to the area under the curve. This is a metric used to calculate the total dosage delivered to the patient. It is just the integral\n\\[\nAUC=\\int_0^T C(t)dt.\n\\]\n\\(C_{max}\\) refers to the maximum concentration experienced by the patient.\nIn the merged tab, a weighted sum of drug profiles is plotted.\nTo calibrate:\n\nSet the half-life to known value.\nSet all but one concentrations to zero.\nIdentify the value of ‘Source Time Sc.’ so that the time from ingestion to peak is consistent with expected kinetics.\n\n\n\n\n#| '!! shinylive warning !!': |\n#|   shinylive does not work in self-contained HTML documents.\n#|   Please set `embed-resources: false` in your metadata.\n#| standalone: true\n#| components: [viewer]\n#| viewerHeight: 500\n\nfrom shiny import App, Inputs, Outputs, Session, render, ui\nfrom shiny import reactive\n\nimport numpy as np\nfrom pathlib import Path\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import odeint\nfrom scipy.integrate import simpson\n\napp_ui = ui.page_fluid(\n    ui.navset_tab(\n    ui.nav_panel(\"Drug 1\",\n\n    ui.layout_sidebar(\n        ui.sidebar(\n    ui.input_slider(id=\"drug_half_life_1\",label=\"Drug half life (h)\",min=1,max=12,value=6,step=1),\n    ui.input_slider(id=\"t1\",label=\"First time (h)\",min=0.0,max=10.0,value=7.0,step=1.0),\n    ui.input_slider(id=\"t2\",label=\"Second time (h)\",min=10.0,max=18.0,value=12.0,step=1.0),\n    ui.input_slider(id=\"t3\",label=\"Third time (h)\",min=17.0,max=22.0,value=24.0,step=1.0),\n    ui.input_slider(id=\"c1\",label=\"First conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"c2\",label=\"Second conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"c3\",label=\"Third conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"source_time_scale_1\",label=\"Source Time Sc (h)\",min=0.0,max=12.0,value=4.0,step=0.1),      \n            ),\n\n        ui.output_plot(\"plot\"),\n    ),\n    ),\n\n    ui.nav_panel(\"Drug 2\",\n\n    ui.layout_sidebar(\n        ui.sidebar(\n    ui.input_slider(id=\"drug_half_life_2\",label=\"Drug half life (h)\",min=1,max=12,value=6,step=1),\n    ui.input_slider(id=\"t1_2\",label=\"First time (h)\",min=0.0,max=10.0,value=7.0,step=1.0),\n    ui.input_slider(id=\"t2_2\",label=\"Second time (h)\",min=10.0,max=18.0,value=12.0,step=1.0),\n    ui.input_slider(id=\"t3_2\",label=\"Third time (h)\",min=17.0,max=22.0,value=24.0,step=1.0),\n    ui.input_slider(id=\"c1_2\",label=\"First conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"c2_2\",label=\"Second conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"c3_2\",label=\"Third conc.\",min=0.0,max=20.0,value=4.0,step=1.0),\n    ui.input_slider(id=\"source_time_scale_2\",label=\"Source Time Sc. (h)\",min=0.0,max=12.0,value=4.0,step=0.1),      \n            ),\n\n        ui.output_plot(\"plot_drug2\"),\n    ),\n    ),\n\n    ui.nav_panel(\"Merge\",\n\n    ui.layout_sidebar(\n        ui.sidebar(\n    ui.input_slider(id=\"weight_drug_1\",label=\"Weight_1\",min=0,max=12,value=1.0,step=0.05),\n     ui.input_slider(id=\"weight_drug_2\",label=\"Weight_2\",min=0.0,max=50.0,value=18.0,step=1),\n          \n            ),\n\n        ui.output_plot(\"plot_drug3\"),\n    ),\n    ),\n\n\n\n    \n    ),\n)\n\n\ndef server(input, output, session):\n\n    def rhs_pop_model(x,t,k_source_rate,drug_decay_rate,t_0,drug_conc_source):\n          rhs=np.zeros_like(x,dtype=float)\n          source_term=0.0\n          for i in range(len(t_0)):\n            source_term+=drug_conc_source[i]*np.exp(-k_source_rate*(t-t_0[i]))*k_source_rate\n          N=x[0]\n          rhs[0]=source_term-drug_decay_rate*N\n          return rhs\n\n    def ComputeModelSolution(k_source_rate,drug_decay_rate,t_sort_day,drug_conc_day):\n        # Define rhs of LV ODEs\n    \n        drug_conc=[]\n        t_sort=[]\n        Cmax=0.0\n        for i in range(num_days):\n            drug_conc_day_i=[x for x in drug_conc_day]\n            t_sort_day_i = [x + i*24.0 for x in t_sort_day]\n            t_sort=t_sort+t_sort_day_i\n            drug_conc=drug_conc+drug_conc_day_i\n        \n        t_sort.append(T_final)        \n        N_0=0.0\n        AUC=0.0\n        t_sol_1=[]\n        N_sol_1=[]\n        for i in range(0,len(t_sort)-1):\n        # Define discretised t domain\n            t = np.linspace(t_sort[i], t_sort[i+1], 1000)\n\n            # define initial conditions\n            init_cond=[N_0]\n            #assert(np.min(t)&gt;np.max(t_sort[0:i]))\n            # Compute numerical solution of ODEs\n            sol1 = odeint(rhs_pop_model,init_cond,t,args=(k_source_rate,drug_decay_rate,t_sort[0:i+1],drug_conc[0:i+1]))\n\n            # Plot results\n            N=sol1[:,0]\n            N_0=N[-1]\n            N_0=N_0\n            t_sol_1=t_sol_1+list(t)\n            N_sol_1=N_sol_1+list(N)\n            #ax.plot(t, N,'b')\n            AUC=AUC+simpson(N, x=t)\n            Cmax=np.max([Cmax,np.max(N)])\n        return t_sol_1,N_sol_1,AUC,Cmax\n\n    T_final=96\n    num_days=int(T_final/24)\n    \n    @reactive.calc\n    def Drug1Compute():\n        drug_half_life_1=float(input.drug_half_life_1())\n        t1=float(input.t1())\n        t2=float(input.t2())\n        t3=float(input.t3())\n        c1=float(input.c1())\n        c2=float(input.c2())\n        c3=float(input.c3())\n        source_time_scale_1=float(input.source_time_scale_1())\n\n        drug_decay_rate_1=np.log(2)/drug_half_life_1\n        k_source_rate= np.log(2)/source_time_scale_1   \n\n        drug_conc_day=[c1,c2,c3]\n        t_sort_day=[t1,t2,t3] \n\n        t_1,N_1,AUC,Cmax=ComputeModelSolution(k_source_rate,drug_decay_rate_1,t_sort_day,drug_conc_day)\n        return t_1,N_1,AUC,Cmax\n\n    @reactive.calc\n    def Drug2Compute():\n        drug_half_life_2=float(input.drug_half_life_2())\n        t1_2=float(input.t1_2())\n        t2_2=float(input.t2_2())\n        t3_2=float(input.t3_2())\n        c1_2=float(input.c1_2())\n        c2_2=float(input.c2_2())\n        c3_2=float(input.c3_2())\n        source_time_scale_2=float(input.source_time_scale_2())\n\n        drug_decay_rate_2=np.log(2)/drug_half_life_2\n        k_source_rate_2= np.log(2)/source_time_scale_2   \n\n        drug_conc_day_2=[c1_2,c2_2,c3_2]\n        t_sort_day_2=[t1_2,t2_2,t3_2] \n\n        t_2,N_2,AUC_2,Cmax_2=ComputeModelSolution(k_source_rate_2,drug_decay_rate_2,t_sort_day_2,drug_conc_day_2)\n        return t_2,N_2,AUC_2,Cmax_2\n\n    @render.plot\n    def plot():\n        fig, ax = plt.subplots(figsize=(6,6))\n        \n        t_1,N_1,AUC,Cmax=Drug1Compute()  \n        \n        ax.plot(t_1,N_1)\n        ax.plot([24,24],[0,Cmax],'r--')\n        ax.plot([48,48],[0,Cmax],'r--')\n        ax.plot([72,72],[0,Cmax],'r--')\n\n        ax.set_xlabel('$t$ (h)')\n        ax.set_xticks([0,12,24,36,48,60,72])\n\n        ax.set_title('AUC = ' + str(int(AUC)) +', Cmax = ' + str(int(Cmax)))\n        \n        plt.grid()\n\n    \n\n    @render.plot\n    def plot_drug2():\n        fig_2, ax_2 = plt.subplots(figsize=(6,6))\n        \n        t_2,N_2,AUC_2,Cmax2=Drug2Compute()  \n\n\n        ax_2.plot(t_2, N_2,'b')\n\n        ax_2.plot([24,24],[0,Cmax2],'r--')\n        ax_2.plot([48,48],[0,Cmax2],'r--')\n        ax_2.plot([72,72],[0,Cmax2],'r--')\n\n        ax_2.set_xlabel('$t$ (h)')\n        ax_2.set_xticks([0,12,24,36,48,60,72])\n\n        ax_2.set_title('AUC = ' + str(int(AUC_2)) +', Cmax = ' + str(int(Cmax2)))\n        \n        plt.grid()\n\n    @render.plot\n    def plot_drug3():\n        fig_3, ax_3 = plt.subplots(3,1)\n        \n        t_1,N_1,AUC_1,Cmax1=Drug1Compute() \n        t_2,N_2,AUC_2,Cmax2=Drug2Compute() \n\n        weight_1=float(input.weight_drug_1())\n        weight_2=float(input.weight_drug_2())\n\n\n        ax_3[0].plot(t_1,N_1)  \n        ax_3[0].plot([24,24],[0,Cmax2],'r--')\n        ax_3[0].plot([48,48],[0,Cmax2],'r--')\n        ax_3[0].plot([72,72],[0,Cmax2],'r--')\n        ax_3[0].set_xlabel('$t$ (h)')\n        ax_3[0].set_xticks([0,12,24,36,48,60,72])\n        ax_3[0].set_title('Drug 1')\n\n\n        ax_3[1].plot(t_2,N_2)  \n        ax_3[1].plot([24,24],[0,Cmax2],'r--')\n        ax_3[1].plot([48,48],[0,Cmax2],'r--')\n        ax_3[1].plot([72,72],[0,Cmax2],'r--')\n        ax_3[1].set_xlabel('$t$ (h)')\n        ax_3[1].set_xticks([0,12,24,36,48,60,72])\n        ax_3[1].set_title('Drug 2')\n\n\n        ax_3[2].plot(t_1,weight_1*np.array(N_1)+weight_2*np.array(N_2))\n  \n        ax_3[2].plot([24,24],[0,Cmax2],'r--')\n        ax_3[2].plot([48,48],[0,Cmax2],'r--')\n        ax_3[2].plot([72,72],[0,Cmax2],'r--')\n\n        ax_3[2].set_xlabel('$t$ (h)')\n        ax_3[2].set_xticks([0,12,24,36,48,60,72])\n        ax_3[2].set_title('Weighted sum')\n\n     \n        plt.grid()\n\n\n    plt.show()\n\n    \napp = App(app_ui, server)\n\n\nFigure 1"
  }
]